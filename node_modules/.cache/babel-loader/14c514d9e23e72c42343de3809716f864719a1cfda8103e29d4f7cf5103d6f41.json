{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KARTIK\\\\Downloads\\\\assignment\\\\src\\\\components\\\\Microphone.js\",\n  _s = $RefreshSig$();\n// src/components/Microphone.js\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Microphone = ({\n  handleTranscription\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    mediaRecorderRef.current = new MediaRecorder(stream);\n    mediaRecorderRef.current.ondataavailable = event => {\n      audioChunksRef.current.push(event.data); // Store the audio chunks\n    };\n    mediaRecorderRef.current.onstop = () => {\n      const audioBlob = new Blob(audioChunksRef.current, {\n        type: 'audio/wav'\n      });\n      handleTranscription(audioBlob); // Pass the recorded audio for transcription\n      audioChunksRef.current = []; // Clear the chunks after sending\n    };\n    mediaRecorderRef.current.start();\n    setIsRecording(true);\n  };\n  const stopRecording = () => {\n    mediaRecorderRef.current.stop();\n    setIsRecording(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: ''\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isRecording ? stopRecording : startRecording,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isRecording ? 'Recording in progress...' : 'Recording stopped.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Microphone, \"9vlr/drR7eRRS6Si05gDHrjPA2U=\");\n_c = Microphone;\nexport default Microphone;\nvar _c;\n$RefreshReg$(_c, \"Microphone\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","Microphone","handleTranscription","_s","isRecording","setIsRecording","mediaRecorderRef","audioChunksRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","start","stopRecording","stop","style","display","justifyContent","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/KARTIK/Downloads/assignment/src/components/Microphone.js"],"sourcesContent":["// src/components/Microphone.js\r\nimport React, { useState, useRef } from 'react';\r\n\r\nconst Microphone = ({ handleTranscription }) => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n\r\n  const startRecording = async () => {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n    mediaRecorderRef.current = new MediaRecorder(stream);\r\n\r\n    mediaRecorderRef.current.ondataavailable = (event) => {\r\n      audioChunksRef.current.push(event.data);  // Store the audio chunks\r\n    };\r\n\r\n    mediaRecorderRef.current.onstop = () => {\r\n      const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\r\n      handleTranscription(audioBlob);  // Pass the recorded audio for transcription\r\n      audioChunksRef.current = [];  // Clear the chunks after sending\r\n    };\r\n\r\n    mediaRecorderRef.current.start();\r\n    setIsRecording(true);\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    mediaRecorderRef.current.stop();\r\n    setIsRecording(false);\r\n  };\r\n\r\n  return (\r\n    <div style={{display:'flex', justifyContent:''}}>\r\n      <button onClick={isRecording ? stopRecording : startRecording}>\r\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n      </button>\r\n      <p>{isRecording ? 'Recording in progress...' : 'Recording stopped.'}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Microphone;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMS,gBAAgB,GAAGR,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMS,cAAc,GAAGT,MAAM,CAAC,EAAE,CAAC;EAEjC,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzEP,gBAAgB,CAACQ,OAAO,GAAG,IAAIC,aAAa,CAACN,MAAM,CAAC;IAEpDH,gBAAgB,CAACQ,OAAO,CAACE,eAAe,GAAIC,KAAK,IAAK;MACpDV,cAAc,CAACO,OAAO,CAACI,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC,CAAE;IAC5C,CAAC;IAEDb,gBAAgB,CAACQ,OAAO,CAACM,MAAM,GAAG,MAAM;MACtC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACf,cAAc,CAACO,OAAO,EAAE;QAAES,IAAI,EAAE;MAAY,CAAC,CAAC;MACzErB,mBAAmB,CAACmB,SAAS,CAAC,CAAC,CAAE;MACjCd,cAAc,CAACO,OAAO,GAAG,EAAE,CAAC,CAAE;IAChC,CAAC;IAEDR,gBAAgB,CAACQ,OAAO,CAACU,KAAK,CAAC,CAAC;IAChCnB,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1BnB,gBAAgB,CAACQ,OAAO,CAACY,IAAI,CAAC,CAAC;IAC/BrB,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,oBACEL,OAAA;IAAK2B,KAAK,EAAE;MAACC,OAAO,EAAC,MAAM;MAAEC,cAAc,EAAC;IAAE,CAAE;IAAAC,QAAA,gBAC9C9B,OAAA;MAAQ+B,OAAO,EAAE3B,WAAW,GAAGqB,aAAa,GAAGjB,cAAe;MAAAsB,QAAA,EAC3D1B,WAAW,GAAG,gBAAgB,GAAG;IAAiB;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACTnC,OAAA;MAAA8B,QAAA,EAAI1B,WAAW,GAAG,0BAA0B,GAAG;IAAoB;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV,CAAC;AAAChC,EAAA,CApCIF,UAAU;AAAAmC,EAAA,GAAVnC,UAAU;AAsChB,eAAeA,UAAU;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}