{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KARTIK\\\\Downloads\\\\assignment\\\\src\\\\components\\\\Transcription.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Microphone from './Microphone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transcription = () => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleTranscription = async audioBlob => {\n    const apiKey = process.env.REACT_APP_DEEPGRAM_API_KEY;\n    try {\n      const response = await fetch('https://api.deepgram.com/v1/listen', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Token ${apiKey}`,\n          'Content-Type': 'audio/wav'\n        },\n        body: audioBlob\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data && data.results && data.results.channels[0].alternatives[0].transcript) {\n          setTranscript(data.results.channels[0].alternatives[0].transcript);\n        } else {\n          setErrorMessage('No transcript found.');\n        }\n      } else {\n        setErrorMessage('Error with transcription service.');\n      }\n    } catch (error) {\n      console.error('Transcription error:', error);\n      setErrorMessage('There was an error with the transcription service.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-box\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Microphone, {\n      handleTranscription: handleTranscription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Transcription, \"9gwD1BX790ip3ywZux0qjATWgGo=\");\n_c = Transcription;\nexport default Transcription;\nvar _c;\n$RefreshReg$(_c, \"Transcription\");","map":{"version":3,"names":["React","useState","Microphone","jsxDEV","_jsxDEV","Transcription","_s","transcript","setTranscript","errorMessage","setErrorMessage","handleTranscription","audioBlob","apiKey","process","env","REACT_APP_DEEPGRAM_API_KEY","response","fetch","method","headers","body","ok","data","json","results","channels","alternatives","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/KARTIK/Downloads/assignment/src/components/Transcription.js"],"sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport Microphone from './Microphone';\r\n\r\nconst Transcription = () => {\r\n  const [transcript, setTranscript] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleTranscription = async (audioBlob) => {\r\n    const apiKey=process.env.REACT_APP_DEEPGRAM_API_KEY;\r\n\r\n    try {\r\n      const response = await fetch('https://api.deepgram.com/v1/listen', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Token ${apiKey}`,\r\n          'Content-Type': 'audio/wav',\r\n        },\r\n        body: audioBlob, \r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        if (data && data.results && data.results.channels[0].alternatives[0].transcript) {\r\n          setTranscript(data.results.channels[0].alternatives[0].transcript);\r\n        } else {\r\n          setErrorMessage('No transcript found.');\r\n        }\r\n      } else {\r\n        setErrorMessage('Error with transcription service.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Transcription error:', error);\r\n      setErrorMessage('There was an error with the transcription service.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      \r\n      \r\n      {errorMessage && <p className=\"error\">{errorMessage}</p>}\r\n      <div className=\"transcript-box\">\r\n        <p>{transcript}</p>\r\n      </div>\r\n      <Microphone handleTranscription={handleTranscription} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transcription;\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMU,mBAAmB,GAAG,MAAOC,SAAS,IAAK;IAC/C,MAAMC,MAAM,GAACC,OAAO,CAACC,GAAG,CAACC,0BAA0B;IAEnD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAE,SAASP,MAAM,EAAE;UAClC,cAAc,EAAE;QAClB,CAAC;QACDQ,IAAI,EAAET;MACR,CAAC,CAAC;MAEF,IAAIK,QAAQ,CAACK,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClC,IAAID,IAAI,IAAIA,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC,CAACpB,UAAU,EAAE;UAC/EC,aAAa,CAACe,IAAI,CAACE,OAAO,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC,CAACpB,UAAU,CAAC;QACpE,CAAC,MAAM;UACLG,eAAe,CAAC,sBAAsB,CAAC;QACzC;MACF,CAAC,MAAM;QACLA,eAAe,CAAC,mCAAmC,CAAC;MACtD;IACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5ClB,eAAe,CAAC,oDAAoD,CAAC;IACvE;EACF,CAAC;EAED,oBACEN,OAAA;IAAA0B,QAAA,GAGGrB,YAAY,iBAAIL,OAAA;MAAG2B,SAAS,EAAC,OAAO;MAAAD,QAAA,EAAErB;IAAY;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxD/B,OAAA;MAAK2B,SAAS,EAAC,gBAAgB;MAAAD,QAAA,eAC7B1B,OAAA;QAAA0B,QAAA,EAAIvB;MAAU;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC,eACN/B,OAAA,CAACF,UAAU;MAACS,mBAAmB,EAAEA;IAAoB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEV,CAAC;AAAC7B,EAAA,CA5CID,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AA8CnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}